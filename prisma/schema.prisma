generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                            String
  email                           String             @unique
  password                        String
  bio                             String?
  image                           String?
  username                        String             @unique
  createdAt                       DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt                       DateTime           @default(now()) @updatedAt @db.Timestamptz(6)
  Bookmark                        Bookmark[]
  Collection                      Collection[]
  CollectionMember                CollectionMember[]
  CollectionPost                  CollectionPost[]
  Comment                         Comment[]
  CommentReport                   CommentReport[]
  Follow_Follow_followerIdToUser  Follow[]           @relation("Follow_followerIdToUser")
  Follow_Follow_followingIdToUser Follow[]           @relation("Follow_followingIdToUser")
  Like                            Like[]
  Notification                    Notification[]
  Post                            Post[]
  UserCollection                  UserCollection[]
  View                            View[]
  accounts                        accounts[]
  sessions                        sessions[]
}

model Analytics {
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  postId           String   @db.Uuid
  pageViews        Int      @default(0)
  uniqueViews      Int      @default(0)
  timeOnPage       Float    @default(0)
  scrollDepth      Float    @default(0)
  bounceRate       Float    @default(0)
  exitRate         Float    @default(0)
  avgTimeOnPage    Float    @default(0)
  avgScrollDepth   Float    @default(0)
  trafficSources   String[]
  deviceTypes      String[]
  operatingSystems String[]
  countries        String[]
  cities           String[]
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @db.Timestamptz(6)
  Post             Post     @relation(fields: [postId], references: [id])
}

model Bookmark {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String   @db.Uuid
  postId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  Post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Collection {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String
  slug             String             @unique
  description      String?
  image            String?
  isPublic         Boolean            @default(true)
  subtitle         String?
  bgColor          String?
  textColor        String?
  authorId         String             @db.Uuid
  createdAt        DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime           @default(now()) @db.Timestamptz(6)
  User             User               @relation(fields: [authorId], references: [id])
  CollectionMember CollectionMember[]
  CollectionPost   CollectionPost[]
  UserCollection   UserCollection[]
}

model CollectionMember {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId       String     @db.Uuid
  collectionId String     @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime   @default(now()) @db.Timestamptz(6)
  Collection   Collection @relation(fields: [collectionId], references: [id])
  User         User       @relation(fields: [userId], references: [id])
}

model CollectionPost {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  postId       String     @db.Uuid
  collectionId String     @db.Uuid
  authorId     String     @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime   @default(now()) @db.Timestamptz(6)
  User         User       @relation(fields: [authorId], references: [id])
  Collection   Collection @relation(fields: [collectionId], references: [id])
  Post         Post       @relation(fields: [postId], references: [id])

  @@unique([postId, collectionId, authorId])
}

model Comment {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content       String
  authorId      String          @db.Uuid
  postId        String          @db.Uuid
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime        @default(now()) @db.Timestamptz(6)
  replyToId     String?         @db.Uuid
  User          User            @relation(fields: [authorId], references: [id], map: "AuthorCommentTo")
  Post          Post            @relation(fields: [postId], references: [id], map: "CommentForPostFrom")
  Comment       Comment?        @relation("CommentToComment", fields: [replyToId], references: [id])
  other_Comment Comment[]       @relation("CommentToComment")
  CommentReport CommentReport[]
  Like          Like[]
  Notification  Notification[]
}

model CommentReport {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  reason    String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  commentId String   @db.Uuid
  userId    String   @db.Uuid
  Comment   Comment  @relation(fields: [commentId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Follow {
  id                            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  followerId                    String   @db.Uuid
  followingId                   String   @db.Uuid
  createdAt                     DateTime @default(now()) @db.Timestamptz(6)
  updatedAt                     DateTime @default(now()) @db.Timestamptz(6)
  User_Follow_followerIdToUser  User     @relation("Follow_followerIdToUser", fields: [followerId], references: [id])
  User_Follow_followingIdToUser User     @relation("Follow_followingIdToUser", fields: [followingId], references: [id])
}

model Like {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String   @db.Uuid
  postId    String?  @db.Uuid
  commentId String?  @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  Comment   Comment? @relation(fields: [commentId], references: [id])
  Post      Post?    @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  userId    String?  @db.Uuid
  postId    String?  @db.Uuid
  commentId String?  @db.Uuid
  Comment   Comment? @relation(fields: [commentId], references: [id])
  Post      Post?    @relation(fields: [postId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])
}

model Post {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title          String
  excerpt        String?
  content        Json
  slug           String           @unique
  published      Boolean          @default(false)
  image          String?
  bannerImage    String?
  isPremium      Boolean          @default(false)
  isFeatured     Boolean          @default(false)
  isPublic       Boolean          @default(true)
  authorId       String           @db.Uuid
  primaryTopicId String?          @db.Uuid
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @default(now()) @db.Timestamptz(6)
  Analytics      Analytics[]
  Bookmark       Bookmark[]
  CollectionPost CollectionPost[]
  Comment        Comment[]
  Like           Like[]
  Notification   Notification[]
  author         User             @relation(fields: [authorId], references: [id])
  Topics         Topics?          @relation(fields: [primaryTopicId], references: [id])
  PostTag        PostTag[]
  PostTopics     PostTopics[]
  View           View[]
  Tag            Tag[]            @relation("PostTag")
}

model PostTag {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  postId    String   @db.Uuid
  tagId     String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  Post      Post     @relation(fields: [postId], references: [id])
  Tag       Tag      @relation(fields: [tagId], references: [id])
}

model PostTopics {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  postId    String   @db.Uuid
  topicId   String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  Post      Post     @relation(fields: [postId], references: [id])
  Topics    Topics   @relation(fields: [topicId], references: [id])

  @@unique([postId, topicId])
}

model Tag {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  normalizedTagSlug String    @unique
  displayTitle      String
  createdAt         DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime  @default(now()) @db.Timestamptz(6)
  PostTag           PostTag[]
  Post              Post[]    @relation("PostTag")
}

model Topics {
  id         String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String
  slug       String       @unique
  createdAt  DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime     @default(now()) @db.Timestamptz(6)
  Post       Post[]
  PostTopics PostTopics[]
}

model UserCollection {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId       String     @db.Uuid
  collectionId String     @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime   @default(now()) @db.Timestamptz(6)
  Collection   Collection @relation(fields: [collectionId], references: [id])
  User         User       @relation(fields: [userId], references: [id])
}

model View {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  userId    String   @db.Uuid
  postId    String   @db.Uuid
  Post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model accounts {
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime @default(now()) @db.Timestamptz(6)
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model sessions {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz(6)

  @@unique([identifier, token])
}
